$script = <<-SCRIPT

# This script should be run in an administrative shell
# It installs software using combination of two package managers: Chocolately and Scoop

# @see https://gist.github.com/mkropat/c1226e0cc2ca941b23a9
function Add-EnvPath {
    param(
        [Parameter(Mandatory=$true)]
        [string] $Path,

        [ValidateSet('Machine', 'User', 'Session')]
        [string] $Container = 'Session'
    )

    if ($Container -ne 'Session') {
        $containerMapping = @{
            Machine = [EnvironmentVariableTarget]::Machine
            User = [EnvironmentVariableTarget]::User
        }
        $containerType = $containerMapping[$Container]

        $persistedPaths = [Environment]::GetEnvironmentVariable('Path', $containerType) -split ';'
        if ($persistedPaths -notcontains $Path) {
            $persistedPaths = $persistedPaths + $Path | where { $_ }
            [Environment]::SetEnvironmentVariable('Path', $persistedPaths -join ';', $containerType)
        }
    }

    $envPaths = $env:Path -split ';'
    if ($envPaths -notcontains $Path) {
        $envPaths = $envPaths + $Path | where { $_ }
        $env:Path = $envPaths -join ';'
    }
}

function Remove-EnvPath {
    param(
        [Parameter(Mandatory=$true)]
        [string] $Path,

        [ValidateSet('Machine', 'User', 'Session')]
        [string] $Container = 'Session'
    )

    if ($Container -ne 'Session') {
        $containerMapping = @{
            Machine = [EnvironmentVariableTarget]::Machine
            User = [EnvironmentVariableTarget]::User
        }
        $containerType = $containerMapping[$Container]

        $persistedPaths = [Environment]::GetEnvironmentVariable('Path', $containerType) -split ';'
        if ($persistedPaths -contains $Path) {
            $persistedPaths = $persistedPaths | where { $_ -and $_ -ne $Path }
            [Environment]::SetEnvironmentVariable('Path', $persistedPaths -join ';', $containerType)
        }
    }

    $envPaths = $env:Path -split ';'
    if ($envPaths -contains $Path) {
        $envPaths = $envPaths | where { $_ -and $_ -ne $Path }
        $env:Path = $envPaths -join ';'
    }
}

function Get-EnvPath {
    param(
        [Parameter(Mandatory=$true)]
        [ValidateSet('Machine', 'User')]
        [string] $Container
    )

    $containerMapping = @{
        Machine = [EnvironmentVariableTarget]::Machine
        User = [EnvironmentVariableTarget]::User
    }
    $containerType = $containerMapping[$Container]

    [Environment]::GetEnvironmentVariable('Path', $containerType) -split ';' |
        where { $_ }
}

Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072

Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')


#####################
# BILL OF MATERIALS
#####################

scoop install git
scoop bucket add extras

# 7Zip
scoop install 7zip

# Dev Tools
choco install -y docker-desktop
choco install podman-cli -y --pre
scoop install aria2
choco install -y argocd-cli
choco install -y bosh-cli
scoop install vscode
scoop install azure-cli
choco install -y aws-iam-authenticator
scoop install aws
choco install -y cloudfoundry-cli
scoop install gcloud
choco install -y gnupg
choco install -y golang
choco install -y gzip
scoop install graphviz
choco install -y libressl
choco install -y minio-client
choco install -y openssl
scoop install terraform
choco install -y terraform-docs
scoop install tflint
choco install -y httpie -source python
choco install -y keybase
choco install -y kind
scoop install kubectl
scoop install k9s
scoop install helm
scoop install helmfile
choco install -y mkcert
scoop install octant
scoop tar install
choco install -y tektoncd-cli
choco install -y vendir
choco install -y ytt
choco install -y kapp
choco install -y kbld
choco install -y imgpkg
scoop bucket add tilt-dev https://github.com/tilt-dev/scoop-bucket
scoop install tilt
choco install -y velero

Set-Variable TARGET_DIR "C:/Users/vagrant"

Set-Variable LOCAL_BIN_DIR $TARGET_DIR/.cli/bin
md $LOCAL_BIN_DIR -ea 0
cd $LOCAL_BIN_DIR

Invoke-WebRequest https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.ps1 -OutFile install.ps1
iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.ps1'))
install.ps1 -AcceptAllDefaults
Remove-Item install.ps1

Set-Variable PIVNET_VERSION 3.0.1
(New-Object System.Net.WebClient).DownloadFile("https://github.com/pivotal-cf/pivnet-cli/releases/download/v$PIVNET_VERSION/pivnet-windows-amd64-$PIVNET_VERSION", "$LOCAL_BIN_DIR/pivnet-windows-amd64-$PIVNET_VERSION.exe")
Rename-Item -Path "$LOCAL_BIN_DIR/pivnet-windows-amd64-$PIVNET_VERSION.exe" -NewName "$LOCAL_BIN_DIR/pivnet.exe"

Set-Variable OM_VERSION 7.4.1
(New-Object System.Net.WebClient).DownloadFile("https://github.com/pivotal-cf/om/releases/download/$OM_VERSION/om-windows-$OM_VERSION.exe", "$LOCAL_BIN_DIR/om-windows-$OM_VERSION.exe")
Rename-Item -Path "$LOCAL_BIN_DIR/om-windows-$OM_VERSION.exe" -NewName "$LOCAL_BIN_DIR/om.exe"

Set-Variable ARGOCD_VERSION 2.1.7
(New-Object System.Net.WebClient).DownloadFile("https://github.com/argoproj/argo-cd/releases/download/v$ARGOCD_VERSION/argocd-windows-amd64.exe", "$LOCAL_BIN_DIR/argocd-windows-amd64.exe")
Rename-Item -Path "$LOCAL_BIN_DIR/argocd-windows-amd64.exe" -NewName "$LOCAL_BIN_DIR/argocd.exe"

Set-Variable ARGO_VERSION 3.2.4
(New-Object System.Net.WebClient).DownloadFile("https://github.com/argoproj/argo-workflows/releases/download/v$ARGO_VERSION/argo-windows-amd64.gz", "$LOCAL_BIN_DIR/argo-windows-amd64.gz")
gunzip $LOCAL_BIN_DIR/argo-windows-amd64.gz
Rename-Item -Path "$LOCAL_BIN_DIR/argo-windows-amd64.exe" -NewName "$LOCAL_BIN_DIR/argo.exe"
Remove-Item $LOCAL_BIN_DIR/argo-windows-amd64.gz

Set-Variable KREW_VERSION 0.4.2
(New-Object System.Net.WebClient).DownloadFile("https://github.com/kubernetes-sigs/krew/releases/download/v$KREW_VERSION/krew.exe", "$LOCAL_BIN_DIR/krew.exe")
(New-Object System.Net.WebClient).DownloadFile("https://github.com/kubernetes-sigs/krew/releases/download/v$KREW_VERSION/krew.yaml", "$LOCAL_BIN_DIR/krew.yaml")

Set-Variable TMC_VERSION 0.4.0-fdabbe74
(New-Object System.Net.WebClient).DownloadFile("https://tmc-cli.s3-us-west-2.amazonaws.com/tmc/$TMC_VERSION/windows/x64/tmc.exe", "$LOCAL_BIN_DIR/tmc.exe")

Set-Variable KNATIVE_VERSION 1.0.0
(New-Object System.Net.WebClient).DownloadFile("https://github.com/knative/client/releases/download/knative-v$KNATIVE_VERSION/kn-windows-amd64.exe", "$LOCAL_BIN_DIR/kn.exe")

Add-EnvPath -Path "$LOCAL_BIN_DIR" -Container "Machine"

Move-Item -Path $TARGET_DIR/tanzu.exe -Destination $LOCAL_BIN_DIR/tanzu.exe
krew install --manifest=$LOCAL_BIN_DIR/krew.yaml

SCRIPT

Vagrant.configure("2") do |config|
  config.vm.box = "StefanScherer/windows_10"
  config.disksize.size = '60GB'
  config.vm.provider "virtualbox" do |v|
    v.check_guest_additions = false
    v.memory = 8192
    v.cpus = 2
  end
  config.vm.provision "file", source: "dist", destination: "/Users/vagrant"
  config.vm.provision "file", source: "inventory.ps1", destination: "/home/vagrant/inventory.ps1"
  config.vm.provision "shell", inline: $script
end